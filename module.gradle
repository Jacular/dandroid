if (isRelease.toBoolean()) {
    apply plugin: 'com.android.library'
} else {
    apply plugin: 'com.android.application'
    configSigning project

}
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

kapt {
    arguments {
        arg("AROUTER_MODULE_NAME", project.getName())
    }
}

android {
    ndkVersion '21.0.6113669'
    compileSdkVersion rootProject.ext.build_version.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.build_version.minSdkVersion
        targetSdkVersion rootProject.ext.build_version.targetSdkVersion
        versionCode rootProject.ext.build_version.versionCode
        versionName rootProject.ext.build_version.versionName

        if (isRelease.toBoolean()) {
            multiDexEnabled true
        } else {
            consumerProguardFiles 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            if (isRelease.toBoolean()) {
                //独立运行
                manifest.srcFile 'src/main/AndroidManifest.xml'
                resources {
                    //正式版本时，排除debug文件夹下所有调试文件
                    exclude 'src/main/debug/*'
                }
            } else {
                //合并到宿主
                manifest.srcFile 'src/main/debug/AndroidManifest.xml'

            }
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            rootProject.ext.devConfigs.each{k,v-> buildConfigField "String", k , v }
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            if (!isRelease.toBoolean()) {
                shrinkResources true
            }
            zipAlignEnabled true
            rootProject.ext.releaseConfigs.each{k,v-> buildConfigField "String", k,v}
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        if (isRelease.toBoolean()) {
            exclude 'META-INF/*'
        }
    }

    lintOptions {
        disable 'InvalidPackage'
        disable "ResourceType"
        abortOnError false
    }

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }

    buildFeatures {
        dataBinding = true
        viewBinding = true
    }

}

dependencies {
    api fileTree(include: ['*.jar'], dir: 'libs')
    //基础模块
    api project(path: ':lib-base')
    //公用模块
    api project(path: ':lib-common')
    //组件化交互模块
    api project(path: ':lib-arouter')
    //网络模块
    api project(path: ':lib-network')
    //each遍历
    api apiDependenciesId
    rootProject.ext.compilers.each{k,v-> kapt v}
}


def configSigning(Project pro) {
    File signPropertiesFile = file("${rootDir.path}/keystore/keystore.properties")
    if (!signPropertiesFile.exists()) return

    println "$pro.name config sign start..."
    pro.android {
        Properties properties = new Properties()
        properties.load(new FileInputStream(signPropertiesFile))
        signingConfigs {
            release {
                storeFile new File(signPropertiesFile.getParent(), properties['keystore'])
                storePassword properties['storePassword']
                keyAlias properties['keyAlias']
                keyPassword properties['keyPassword']
            }
        }
        buildTypes.release.signingConfig signingConfigs.release
    }
    println "$pro.name config sign end..."
}